{"ast":null,"code":"import _regeneratorRuntime from\"/Users/AllanSendagi/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/AllanSendagi/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/AllanSendagi/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'./axios';import'./Row.css';import Youtube from'react-youtube';import movieTrailer from'movie-trailer';var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.log(request.data.results)\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"h2\",null,title),/*#__PURE__*/React.createElement(\"div\",{className:\"row_posters\"},movies.map(function(movie){return/*#__PURE__*/React.createElement(\"img\",{key:movie.id,onClick:function onClick(){return handleClick(movie);},className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name});})),trailerUrl&&/*#__PURE__*/React.createElement(Youtube,{videoId:trailerUrl,opts:opts}));}export default Row;","map":{"version":3,"sources":["/Users/AllanSendagi/Desktop/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path"],"mappings":"6dAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAwC,OAAxC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAGA,QAASC,CAAAA,GAAT,MAA2C,IAA7BC,CAAAA,KAA6B,MAA7BA,KAA6B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAZC,UAAY,MAAZA,UAAY,eACfT,QAAQ,CAAC,EAAD,CADO,wCACnCU,MADmC,eAC3BC,SAD2B,8BAENX,QAAQ,CAAC,EAAD,CAFF,yCAEnCY,UAFmC,eAEvBC,aAFuB,eAK1CZ,SAAS,CAAC,UAAK,SACCa,CAAAA,SADD,qIACd,qKACuBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADvB,QACOQ,OADP,eAEC;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHD,gCAIQF,OAJR,wDADc,4CAOdF,SAAS,GACT,CARQ,CAQP,CAACN,QAAD,CARO,CAAT,CASA,GAAMW,CAAAA,IAAI,CAAG,CACZC,MAAM,CAAE,KADI,CAEZC,KAAK,CAAE,MAFK,CAGZC,UAAU,CAAE,CACXC,QAAQ,CAAE,CADC,CAHA,CAAb,CAOI,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC9B,GAAGb,UAAH,CAAe,CACdC,aAAa,CAAC,EAAD,CAAb,CACA,CAFD,IAEO,CACNT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACCC,IADD,CACM,SAAAC,GAAG,CAAI,CACZ,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACA,CAJD,EAIIkB,KAJJ,CAIU,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EAJV,EAKA,CACD,CAVD,CAWJ,mBACC,2BAAK,SAAS,CAAC,KAAf,eACC,8BAAK3B,KAAL,CADD,cAGE,2BAAK,SAAS,CAAC,aAAf,EACKG,MAAM,CAAC2B,GAAP,CAAW,SAAAZ,KAAK,qBACnB,2BACC,GAAG,CAAEA,KAAK,CAACa,EADZ,CAEC,OAAO,CAAE,yBAAKd,CAAAA,WAAW,CAACC,KAAD,CAAhB,EAFV,CAGC,SAAS,sBAAgBhB,UAAU,EAAI,iBAA9B,CAHV,CAIG,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACc,WAAT,CAAuBd,KAAK,CAACe,aAAvD,CAJN,CAI8E,GAAG,CAAEf,KAAK,CAACC,IAJzF,EADmB,EAAhB,CADL,CAHF,CAYGd,UAAU,eAAI,oBAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAZjB,CADD,CAgBA,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, {useState, useEffect}from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\n\nfunction Row({title, fetchUrl, isLargeRow}){ \n\tconst [movies, setMovies]= useState([]);\n\tconst [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n\tuseEffect(()=> {\n\t\tasync function fetchData(){\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\t// console.log(request.data.results)\n\t\t\tsetMovies(request.data.results)\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t},[fetchUrl])\n\tconst opts = {\n\t\theight: \"390\",\n\t\twidth: \"100%\",\n\t\tplayerVars: {\n\t\t\tautoplay: 1,\n\t\t}\n\t}\n     const handleClick = (movie) => {\n     \tif(trailerUrl) {\n     \t\tsetTrailerUrl('');\n     \t} else {\n     \t\tmovieTrailer(movie?.name || \"\" )\n     \t\t.then(url => {\n     \t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n     \t\t\tsetTrailerUrl(urlParams.get('v'))\n     \t\t}) .catch((error) => console.log(error))\n     \t}\n     }\n\treturn (\n\t\t<div className=\"row\">\n\t\t <h2>{title}</h2>\n\n\t\t  <div className=\"row_posters\">\n\t\t   \t  {movies.map(movie => (\n\t\t   \t<img \n\t\t\t   \tkey={movie.id}\n\t\t\t   \tonClick={()=> handleClick(movie)}\n\t\t\t   \tclassName={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n\t\t      \tsrc={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n\t\t   ))}\n\t\t  </div>\n\t\t  {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n\t\t</div>\n\t)\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}