{"ast":null,"code":"var _jsxFileName = \"/Users/AllanSendagi/Desktop/netflix-clone/src/Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport MovieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(request.data.results)\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    onClick: () => handleClick(movie),\n    className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n    src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }))), trailerUrl && /*#__PURE__*/React.createElement(Youtube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }\n  }));\n}\n\nexport default Row;","map":{"version":3,"sources":["/Users/AllanSendagi/Desktop/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","MovieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerUrl","setTrailerUrl","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA2C;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAqBX,QAAQ,CAAC,EAAD,CAAnC;AAGAC,EAAAA,SAAS,CAAC,MAAK;AACd,mBAAeW,SAAf,GAA0B;AACzB,YAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUN,QAAV,CAAtB,CADyB,CAEzB;;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACA;;AACDD,IAAAA,SAAS;AACT,GARQ,EAQP,CAACJ,QAAD,CARO,CAAT;AASA,QAAMS,IAAI,GAAG;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZC,IAAAA,KAAK,EAAE,MAFK;AAGZC,IAAAA,UAAU,EAAE;AACXC,MAAAA,QAAQ,EAAE;AADC;AAHA,GAAb;;AAOI,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC9B,QAAGC,UAAH,EAAe;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA,KAFD,MAEO;AACNC,MAAAA,YAAY,CAAC,CAAAH,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEI,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACMC,GAAG,IAAI;AACZ,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAR,QAAAA,aAAa,CAACK,SAAS,CAAChB,GAAV,CAAc,GAAd,CAAD,CAAb;AACA,OAJD,EAIIoB,KAJJ,CAIWC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJrB;AAKA;AACD,GAVD;;AAWJ,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK5B,KAAL,CADD,eAGE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,MAAM,CAAC4B,GAAP,CAAWf,KAAK,iBACnB;AACC,IAAA,GAAG,EAAEA,KAAK,CAACgB,EADZ;AAEC,IAAA,OAAO,EAAE,MAAKjB,WAAW,CAACC,KAAD,CAF1B;AAGC,IAAA,SAAS,EAAG,cAAad,UAAU,IAAI,iBAAkB,EAH1D;AAIG,IAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGc,KAAK,CAACiB,WAAT,GAAuBjB,KAAK,CAACkB,aAAc,EAJ3E;AAI8E,IAAA,GAAG,EAAElB,KAAK,CAACI,IAJzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CADL,CAHF,EAYGH,UAAU,iBAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,UAAlB;AAA8B,IAAA,IAAI,EAAEP,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZjB,CADD;AAgBA;;AAED,eAAeX,GAAf","sourcesContent":["import React, {useState, useEffect}from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport MovieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\n\nfunction Row({title, fetchUrl, isLargeRow}){ \n\tconst [movies, setMovies]= useState([]);\n\n\n\tuseEffect(()=> {\n\t\tasync function fetchData(){\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\t// console.log(request.data.results)\n\t\t\tsetMovies(request.data.results)\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t},[fetchUrl])\n\tconst opts = {\n\t\theight: \"390\",\n\t\twidth: \"100%\",\n\t\tplayerVars: {\n\t\t\tautoplay: 1,\n\t\t}\n\t}\n     const handleClick = (movie) => {\n     \tif(trailerUrl) {\n     \t\tsetTrailerUrl('');\n     \t} else {\n     \t\tmovieTrailer(movie?.name || \"\" )\n     \t\t.then(url => {\n     \t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n     \t\t\tsetTrailerUrl(urlParams.get('v'));\n     \t\t}) .catch((error) => console.log(error))\n     \t}\n     }\n\treturn (\n\t\t<div className=\"row\">\n\t\t <h2>{title}</h2>\n\n\t\t  <div className=\"row_posters\">\n\t\t   \t  {movies.map(movie => (\n\t\t   \t<img \n\t\t\t   \tkey={movie.id}\n\t\t\t   \tonClick={()=> handleClick(movie)}\n\t\t\t   \tclassName={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n\t\t      \tsrc={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n\t\t   ))}\n\t\t  </div>\n\t\t  {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n\t\t</div>\n\t)\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}