{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec230508.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL:'https://api.themoviedb.org/3',\n})\n\nexport default instance;\n","import React, {useState, useEffect}from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\n\nfunction Row({title, fetchUrl, isLargeRow}){ \n\tconst [movies, setMovies]= useState([]);\n\tconst [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n\tuseEffect(()=> {\n\t\tasync function fetchData(){\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\t// console.log(request.data.results)\n\t\t\tsetMovies(request.data.results)\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t},[fetchUrl])\n\tconst opts = {\n\t\theight: \"390\",\n\t\twidth: \"100%\",\n\t\tplayerVars: {\n\t\t\tautoplay: 1,\n\t\t}\n\t}\n     const handleClick = (movie) => {\n     \tif(trailerUrl) {\n     \t\tsetTrailerUrl('');\n     \t} else {\n     \t\tmovieTrailer(movie?.name || \"\" )\n     \t\t.then(url => {\n     \t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n     \t\t\tsetTrailerUrl(urlParams.get('v'))\n     \t\t}) .catch((error) => console.log(error))\n     \t}\n     }\n\treturn (\n\t\t<div className=\"row\">\n\t\t <h2>{title}</h2>\n\n\t\t  <div className=\"row_posters\">\n\t\t   \t  {movies.map(movie => (\n\t\t   \t<img \n\t\t\t   \tkey={movie.id}\n\t\t\t   \tonClick={()=> handleClick(movie)}\n\t\t\t   \tclassName={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n\t\t      \tsrc={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\n\t\t   ))}\n\t\t  </div>\n\t\t  {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n\t\t</div>\n\t)\n}\n\nexport default Row;","const API_KEY = \"1370b79fc925891988bdb1c8555b5ec0\";\n\nconst requests = {\n  fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies:`discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies:`discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies:`discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries:`discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\n\nexport default requests;","import React, {useState, useEffect} from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css'\n\nfunction Banner (){\n   const [movie, setMovie] = useState([]);\n\n\tuseEffect(() => {\n\t\tasync function fetchData(){\n\t\t const request = await axios.get(requests.fetchNetflixOriginals)\n\t      setMovie(\n\t\t \trequest.data.results[\n\t\t \t Math.floor(Math.random()* request.data.results.length-1)\n\t\t \t]\n\t\t  )\n\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t },[])\n\tconsole.log(movie)\n\tfunction truncate(str, n){\n\t\treturn str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n\t}\n\treturn (\n       <header className=\"banner\"\n        style={{\n        \tbackgroundSize: 'cover',\n        \tbackgroundImage: `url(\n        \t\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        \t)`,\n        \tbackgroundPosition: 'center center',\n        }}\n       >\n\t\t<div className=\"banner-contents\">\n\t\t  <h1 className=\"banner_title\">\n\t\t  \t{movie?.title || movie?.name || movie?.original_name}\n\t\t  </h1>\n\t\t  \t<div className=\"banner_buttons\">\n\t\t  \t\t<button className=\"banner_button\">Play</button>\n\t\t  \t\t<button className=\"banner_button\">My List</button>\n\t\t  \t</div>\n\t\t   <h1 className=\"banner_description\">\n\t\t    {truncate(movie?.overview, 150)}\n\t\t  </h1>\n\t\t</div>\n\t     <div className=\"banner-fadeBottom\" />\n\t   </header>\n\t)\n}\nexport default Banner;","import React, {useState, useEffect} from 'react';\nimport './nav.css';\n\n\nfunction Nav(){\n\tconst [show, handleShow] = useState(false);\n\n\tuseEffect(()=> {\n\t\twindow.addEventListener(\"scroll\", () => { \n\t\t\tif(window.scrollY > 100) {\n\t\t\t\thandleShow(true);\n\t\t\t} else handleShow(false)\n\t\t})\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"scroll\")\n\t\t}\n\t},[])\n\treturn (\n\t\t<div className={`nav ${show && \"nav_black\"}`}>\n\t\t  <img className=\"nav_logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\" alt=\"Netflix Logo\" />\n\n\t\t  <img className=\"nav_avatar\" src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Netflix Logo\" />\n\t\t</div>\n\t)\n}\n\nexport default Nav;","import React from 'react';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './nav';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row \n         title=\"NETFLIX ORIGINALS\"\n         fetchUrl={requests.fetchNetflixOriginals}\n         isLargeRow\n         />\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}